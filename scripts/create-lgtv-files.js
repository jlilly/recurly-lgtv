#!/usr/bin/env node
'use strict'

// This script creates the index.html file neseccary to launch an app on
// an webos enabled LGTV for debugging purposes, then creates the .ipk
// needed to install on the LGTV.
//
// You will need to run this script if:
// 1: You haven't already run `npm start`
// 2: Your local IP changes
// 3: You wish to change the port of the ng dev server
//
// After this you can run `install-and-launch.js` to run the app on the tv
//
// For more information:
// https://webostv.developer.lge.com/

const { execSync } = require('child_process');
const fs = require('fs');
const { networkInterfaces } = require('os');
const { sep } = require('path');
const { promptOnMultipleOptions, webosRoot } =  require('./utils');

const appName = 'LGTV hosted app';

// directory to write the index file, relative to working directory
const dir = 'webos';

// filename, shouldn't need to be changed
const filename = 'index.html';

// Port that dev server is running on
const port = 4200;

// Main logic
console.log('Creating the files necessary to launch on LGTVs');
getIp().then(createFiles);

// Functions

// Get valid IPv4 LAN addr for this machine
// Prompts the user if ther are multiple IPs (EG on a VPN)
function getIp() {
  const ips = [];
  const nets = networkInterfaces();
  for (const name of Object.keys(nets)) {
    for (const net of nets[name]) {
      // Skip over non-IPv4 and internal (i.e. 127.0.0.1) addresses
      if (net.family === 'IPv4' && !net.internal) {
        ips.push(net.address);
      }
    }
  }

  if( !ips.length ) return noIps();
  if( ips.length === 1 ) return Promise.resolve(ips[0]);
  return promptOnMultipleOptions({
    question: 'Please select your LAN IP address from the list above: ',
    options: ips
  });
}

// Helper fn for when no ips addrs are found
function noIps() {
  console.error('An IP address was not found');
  console.error('Please check your network and try again');
  console.error('index.html was not created');
  process.exit(1);
}

// Create the index.html file needed to point the tv to the ng dev server
function createIndexFile(ip) {
  // NOTE: use encodeURIComponent if there are special chars in the url
  const url = `http://${ip}:${port}`;


  // This file is mostly generated by `ares-generate -t hosted_webapp`
  // but local ip of the dev machine needs to be injected
  const indexFile = `<!DOCTYPE html>
<html>
<head>
	<script>location.href='${url}';</script>
</head>
<body>
</body>
</html>
  `;

  console.log(`${appName} will point to ${url}`);
  console.log(`Writing ${process.cwd()}${sep}${dir}${sep}${filename}`);

  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir);
  }

  try {
    fs.writeFileSync(`${dir}/${filename}`, indexFile, 'utf8');
  } catch (e) {
    console.error(e.message);
    console.error('index.html was not created');
    process.exit(1);
  }
  console.log('Success!');
}

function createPackage() {
  try {
    const output = execSync(`${webosRoot}${sep}ares-package .`, {
      cwd: `${process.cwd()}${sep}${dir}`,
      encoding: 'utf8'
    });
    console.log(output);

  } catch (e) {
    console.error(e.message);
    console.error('webOS package was not created');
    process.exit(1);
  }
}

function createFiles(ip) {
  createIndexFile(ip);
  createPackage();
}
