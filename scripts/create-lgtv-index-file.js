'use strict'

// This script creates the index.html file neseccary to launch an app on
// an webos enabled LGTV for debugging purposes
//
// For more information:
// https://webostv.developer.lge.com/ 

const { networkInterfaces } = require('os')
const readline = require('readline')
const fs = require('fs')
const { sep } = require('path')

const appName = 'LGTV hosted app'

// directory to write the index file, relative to working directory
const dir = 'webos'

// filename, shouldn't need to be changed
const filename = 'index.html'

// Port that dev server is running on
const port = 4200

// Main logic

const ipList = getIps()

if (ipList.length > 1) promptOnMultipleIps(ipList)
else if (ipList.length === 0) noIps()
else createIndexFile(ipList[0])

// Functions

// Find all IPv4 addresses on all network interfaces
function getIps() {
  const ips = []
  const nets = networkInterfaces()
  for (const name of Object.keys(nets)) {
    for (const net of nets[name]) {
      // Skip over non-IPv4 and internal (i.e. 127.0.0.1) addresses
      if (net.family === 'IPv4' && !net.internal) {
        ips.push(net.address)
      }
    }
  }
  return ips
}

// Ask the user to specify which ip to use
function promptOnMultipleIps(ips) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  })

  ips.forEach((ip, index) => console.log(`${index + 1})\t${ip}`))
  rl.question('Please select your LAN IP address from the list above: ', selection => {
    const index = +selection // force into number
    if (Number.isNaN(index) || index < 1 || index > ips.length) {
      console.error(`Invalid selection: ${selection}`)
      console.error('Please re-run this script to try again')
      rl.close()
      process.exit(1)
    }

    rl.close()
    createIndexFile(ips[index - 1])
  })
}

// Helper fn for when no ips addrs were found
function noIps() {
  console.error('An IP address was not found')
  console.error('Please check your network and try again')
  console.error('index.html was not created')
  process.exit(1)
}

// Create the index.html file needed to point to the ng dev server
function createIndexFile(ip) {
  // NOTE: use encodeURIComponent if there are special chars in the url
  const url = `http://${ip}:${port}`


  // This file is mostly generated by `ares-generate -t hosted_webapp`
  // but local ip of the dev machine needs to be injected
  const indexFile = `<!DOCTYPE html>
<html>
<head>
	<script>location.href='${url}';</script>
</head>
<body>
</body>
</html>
  `

  console.log(`${appName} will point to ${url}`)
  console.log(`Writing ${process.cwd()}${sep}${dir}${sep}${filename}`)

  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir)
  }

  fs.writeFile(`${dir}/${filename}`, indexFile, 'utf8', err => {
    if (err) {
      console.error(err.message)
      console.error('index.html was not created')
      process.exit(1)
    }

    console.log('Success!')
  })
}
